<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Wunion.DataAdapter.CodeFirstDemo</name>
    </assembly>
    <members>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.AuthorizationAccessor">
            <summary>
            用于实现授权访问器的接口.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.AuthorizationAccessor.Authorization">
            <summary>
            用户权限信息.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.DateTimeJsonConverter">
            <summary>
            <see cref="T:System.DateTime"/> 类型的 Json 序列化格式转换控制.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.DateTimeNullableConverter">
            <summary>
            <see cref="T:System.DateTime"/> 可空类型的 Json 序列化格式转换控制.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.ServiceCollectionExtensions">
            <summary>
            用于扩展 <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> 对象的方法.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.ServiceCollectionExtensions.AddDbContainer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Wunion.DataAdapter.CodeFirstDemo.Data.IDatabaseContainer})">
            <summary>
            添加数据库容器的依赖注入支持.
            </summary>
            <param name="services"></param>
            <param name="configure">用于设置数据库容器</param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.ServiceCollectionExtensions.AddDbConverterOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Wunion.DataAdapter.Kernel.DbValueConverterOptions})">
            <summary>
            添加数据库值类型转换器的配置.
            </summary>
            <param name="services"></param>
            <param name="configure">用于配置值转换器的方法.</param>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.ApplicationBuilderExtensions">
            <summary>
            用于扩展 <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/>
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.ApplicationBuilderExtensions.UseSqlServer(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Wunion.DataAdapter.CodeFirstDemo.Data.DbEngineConfiguration})">
            <summary>
            使用 Microsoft SQL Server 数据库.
            </summary>
            <param name="app"></param>
            <param name="configure">用于配置数据库.</param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.ApplicationBuilderExtensions.UseMySql(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Wunion.DataAdapter.CodeFirstDemo.Data.DbEngineConfiguration})">
            <summary>
            使用 MySQL 数据库.
            </summary>
            <param name="app"></param>
            <param name="configure">用于配置数据库.</param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.ApplicationBuilderExtensions.UseNpgsql(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Wunion.DataAdapter.CodeFirstDemo.Data.DbEngineConfiguration})">
            <summary>
            使用 PostgreSQL 数据库.
            </summary>
            <param name="app"></param>
            <param name="configure">用于配置数据库.</param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.ApplicationBuilderExtensions.UseSqlite3(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Wunion.DataAdapter.CodeFirstDemo.Data.DbEngineConfiguration})">
            <summary>
            使用 Sqlite3 数据库.
            </summary>
            <param name="app"></param>
            <param name="configure">用于配置数据库.</param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.ApplicationBuilderExtensions.UseRsaProtect(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Wunion.DataAdapter.CodeFirstDemo.Data.Security.IDataProtection})">
            <summary>
            使用 RSA 数据保护服务.
            </summary>
            <param name="app"></param>
            <param name="configure"></param>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.UserAuthorizeAttribute">
            <summary>
            用于验证用户账的授权，若不通过则阻断访问.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.CodeFirstDemo.UserAuthorizeAttribute.SUPER_USER_UID">
            <summary>
            超级用户的 UID.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.UserAuthorizeAttribute.RequiredPermission">
            <summary>
            获取或设置验证时所需要的权限.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.UserAuthorizeAttribute.OnAuthorize(Wunion.DataAdapter.CodeFirstDemo.Data.Models.UserAuthorization)">
            <summary>
            授权通过返回 true，否则应返回 false .
            </summary>
            <param name="authorization">授权信息.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.UserAuthorizeAttribute.PermissionDenied(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            没有权限时阻断请求.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.UserAuthorizeAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            执行访问授权的验证.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.WebApiException">
            <summary>
            表示 webapi 中触发的异常.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.WebApiException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.CodeFirstDemo.WebApiException"/> 的对象实例.
            </summary>
            <param name="code">错误代码.</param>
            <param name="message">错误信息.</param>
            <param name="innerException">引发当前错误的异常信息.</param>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.WebApiException.Code">
            <summary>
            已知错误的异常代码.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.WebApiExceptionFilter">
            <summary>
            用于自动处理 WebApi 的异常.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.WebApiExceptionFilter.#ctor(Microsoft.Extensions.Logging.ILogger{Wunion.DataAdapter.CodeFirstDemo.WebApiExceptionFilter},Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.CodeFirstDemo.WebApiExceptionFilter"/> 的对象实例.
            </summary>
            <param name="_logger"></param>
            <param name="env"></param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.WebApiExceptionFilter.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            WebApi 中产生错误时执行.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Controllers.DataProtectionController">
            <summary>
            用于提供数据保护服务的 WebApi 控制器.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Controllers.DataProtectionController.#ctor(Wunion.DataAdapter.CodeFirstDemo.Data.IDatabaseContainer,Wunion.DataAdapter.CodeFirstDemo.Data.Security.IDataProtection,Wunion.DataAdapter.CodeFirstDemo.AuthorizationAccessor)">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.CodeFirstDemo.Controllers.DataProtectionController"/> 控制器实例.
            </summary>
            <param name="container"></param>
            <param name="dp"></param>
            <param name="accessor"></param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Controllers.DataProtectionController.ChangeDatabase(System.String)">
            <summary>
            切换当前正在使用的数据库.
            </summary>
            <param name="kind">数据库种类（取值范围：mssql, mysql, npgsql, sqlite3）.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Controllers.DataProtectionController.GenKey">
            <summary>
            生成密钥.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Controllers.DataProtectionController.Encrypt(System.String)">
            <summary>
            加密保护给定的文本.
            </summary>
            <param name="text">要保护的文本.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Controllers.DataProtectionController.Decrypt(System.String)">
            <summary>
            解密给定的文本.
            </summary>
            <param name="text">待解密的文本.</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Controllers.UserAccountController">
            <summary>
            提供用户账户管理功能的控制器.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Controllers.UserAccountController.Get">
            <summary>
            获取所有用户账户列表.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Controllers.UserAccountController.Create(Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccount)">
            <summary>
            用于创建用户账户.
            </summary>
            <param name="user">用户账户信息.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Controllers.UserAccountController.Update(Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccount)">
            <summary>
            更新指定的用户账户信息.
            </summary>
            <param name="user">用户账户信息.</param>
            <returns></returns>
            <exception cref="T:Wunion.DataAdapter.CodeFirstDemo.WebApiException"></exception>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Controllers.UserAccountController.Delete(System.Int32)">
            <summary>
            删除指定 uid 的用户账户.
            </summary>
            <param name="uid">用户账户的 uid</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Controllers.UserAccountController.LogIn(System.String,System.String)">
            <summary>
            用户账户登录.
            </summary>
            <param name="name">用户账户名或邮箱.</param>
            <param name="password">登录密码.</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.IDatabaseContainer">
            <summary>
            表示应用程序的数据库容器.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.IDatabaseContainer.DbKind">
            <summary>
            获取或设置当前活动的数据库种类.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.IDatabaseContainer.AddDbEngine(System.String,Wunion.DataAdapter.CodeFirstDemo.Data.DbEngineConfiguration)">
            <summary>
            添加一个数据库引擎的配置信息.
            </summary>
            <param name="key">键名称.</param>
            <param name="configuration">配置信息.</param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.IDatabaseContainer.GetDbContext``1">
            <summary>
            获取数据库上下文对象.
            </summary>
            <typeparam name="TDbContext"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.DbEngineConfiguration">
            <summary>
            表示数据引擎的配置信息.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.DbEngineConfiguration.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.CodeFirstDemo.Data.DbEngineConfiguration"/> 的对象实例.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.DbEngineConfiguration.Kind">
            <summary>
            表示数据库种类.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.DbEngineConfiguration.DbEngine">
            <summary>
            数据库引擎.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.DbEngineConfiguration.DbContextFactory">
            <summary>
            设置用于创建数据库上下文对象实例的方法.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.DbEngineConfiguration.CreateDbContext``1(Wunion.DataAdapter.Kernel.DataEngine)">
            <summary>
            创建数据库上下文对象.
            </summary>
            <typeparam name="TDbContext"></typeparam>
            <param name="engine">数据库引擎.</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.DatabaseContainer">
            <summary>
            数据库容器.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.DatabaseContainer.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.CodeFirstDemo.Data.DatabaseContainer"/> 对象实例.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.DatabaseContainer.DbKind">
            <summary>
            获取或设置当前活动的数据库种类.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountDao">
            <summary>
            表示用户账户实体. DAO .
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountDao.UID">
            <summary>
            表示用户账户ID.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountDao.Name">
            <summary>
            用户账户名称.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountDao.Password">
            <summary>
            用户密码.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountDao.Status">
            <summary>
            用户账户的状态.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountDao.Groups">
            <summary>
            该用户隶属的组.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountDao.User">
            <summary>
            该用户账户的使用人.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountDao.PhoneNumber">
            <summary>
            手机号.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountDao.Email">
            <summary>
            电子邮件.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountGroupDao">
            <summary>
            表示用户账户表的实体 DAO .
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountGroupDao.Id">
            <summary>
            组ID
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountGroupDao.Name">
            <summary>
            组名称.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountGroupDao.Description">
            <summary>
            组说明.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountGroupDao.Permissions">
            <summary>
            该组的权限集.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.ISoftDelete">
            <summary>
            用于实现支持软删除的实体.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.ISoftDelete.IsDeleted">
            <summary>
            是否已删除.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.ISoftDelete.DeletionDate">
            <summary>
            删除日期.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.SoftDelete">
            <summary>
            定义软删除字段的实体基类.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.SoftDelete.IsDeleted">
            <summary>
            是否已删除.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.SoftDelete.DeletionDate">
            <summary>
            删除日期.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.SoftDelete.#ctor">
            <summary>
            创建一个软删除实体字段定义.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountStatus">
            <summary>
            表示用户账户的状态.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountStatus.Enabled">
            <summary>
            正常启用状态.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountStatus.Disabled">
            <summary>
            用户账户已被禁用.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountStatus.Locked">
            <summary>
            用户账户已被锁定.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccount">
            <summary>
            表示用户账户实体.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccount.UID">
            <summary>
            表示用户账户ID.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccount.Name">
            <summary>
            用户账户名称.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccount.Password">
            <summary>
            用户密码.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccount.Status">
            <summary>
            用户账户的状态.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccount.Groups">
            <summary>
            该用户隶属的组.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccount.User">
            <summary>
            该用户账户的使用人.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccount.PhoneNumber">
            <summary>
            手机号.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccount.Email">
            <summary>
            电子邮件.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountStatusConverter">
            <summary>
            用户账户状态枚举的数据库类型转换器.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountStatusConverter.ConvertTo(Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountStatus,System.Type,System.Object@)">
            <summary>
            转换到数据库支持的类型.
            </summary>
            <param name="value"></param>
            <param name="dest"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountStatusConverter.Parse(System.Object,Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountStatus@)">
            <summary>
            从数据库支持的类型转换为枚举.
            </summary>
            <param name="value"></param>
            <param name="buffer"></param>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountGroup">
            <summary>
            表示用户账户表的实体
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountGroup.Id">
            <summary>
            组 ID
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountGroup.Name">
            <summary>
            组名称.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountGroup.Description">
            <summary>
            组说明.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountGroup.Permissions">
            <summary>
            该组的权限集.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.IntegerCollectionConverter">
            <summary>
            表示用户账户权限集合转换器.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.IntegerCollectionConverter.ConvertTo(System.Collections.Generic.List{System.Int32},System.Type,System.Object@)">
            <summary>
            转换到数据库支持的值类型.
            </summary>
            <param name="value"></param>
            <param name="dest"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.IntegerCollectionConverter.Parse(System.Object,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            从数据库中的值转换为集合.
            </summary>
            <param name="value"></param>
            <param name="buffer"></param>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.WriteDateTime">
            <summary>
            定义包含记录写入（创建及最后修改）日期字段的实体基类.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.WriteDateTime.Creation">
            <summary>
            创建日期.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.WriteDateTime.LastModified">
            <summary>
            最后修改日期.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.WriteDateSoftDelete">
            <summary>
            同时定义记录写入（创建及最后修改）日期及软删除字段的实体基类.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.WriteDateSoftDelete.IsDeleted">
            <summary>
            是否已删除.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.WriteDateSoftDelete.DeletionDate">
            <summary>
            删除日期.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.MyDbContext">
            <summary>
            测试的数据库.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.MyDbContext.#ctor(Wunion.DataAdapter.Kernel.DataEngine)">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.MyDbContext"/> 数据库上下文对象实例.
            </summary>
            <param name="engine"></param>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.MyDbContext.UserAccounts">
            <summary>
            用户账户表.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.MyDbContext.UserAccountGroups">
            <summary>
            用户账户权限表.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.MyDbContext.OnBeforeGenerating(Wunion.DataAdapter.Kernel.CodeFirst.IGeneratingOptions)" -->
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.MyDbContext.OnGenerateCompleted(System.Action{System.String})">
            <summary>
            在数据库架构生成完成时创建预置数据.
            </summary>
            <param name="log"></param>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.MyTableUpgradeMigrator">
            <summary>
            用于在表升级重建时迁移数据.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Models.ResultMessage">
            <summary>
            表示错误信息.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Models.ResultMessage.Code">
            <summary>
            错误代码.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Models.ResultMessage.Message">
            <summary>
            错误消息.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Models.UserAuthorization">
            <summary>
            表示用户授权信息.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Models.UserAuthorization.Tenant">
            <summary>
            租户.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Models.UserAuthorization.UID">
            <summary>
            用户账户 ID.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Models.UserAuthorization.Producer">
            <summary>
            发行者.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Models.UserAuthorization.Grant">
            <summary>
            授权日期.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Models.UserAuthorization.Period">
            <summary>
            有效期（以分钟为单位）.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Models.UserAuthorization.Permissions">
            <summary>
            权限.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Models.AuthorizationMessage">
            <summary>
            用于返回授权消息.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Models.AuthorizationMessage.Grant">
            <summary>
            授权生效日期.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Models.AuthorizationMessage.Period">
            <summary>
            有效期（以分钟为单位）.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Models.AuthorizationMessage.Token">
            <summary>
            授权令牌.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.UserDataModel">
            <summary>
            用户信息的数据模型.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.UserDataModel.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.CodeFirstDemo.Data.UserDataModel"/> 模型对象.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.UserDataModel.UID">
            <summary>
            用户账户ID.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.UserDataModel.Name">
            <summary>
            用户账户名称.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.UserDataModel.Status">
            <summary>
            用户账户的状态.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.UserDataModel.Groups">
            <summary>
            用户账户组.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.UserDataModel.User">
            <summary>
            该用户账户的使用人.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.UserDataModel.PhoneNumber">
            <summary>
            手机号.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.UserDataModel.Email">
            <summary>
            电子邮件.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.UserDataModel.Creation">
            <summary>
            创建日期.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.UserDataModel.LastModified">
            <summary>
            最后修改日期.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Security.IDataProtection">
            <summary>
            实现数据保护的接口.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Security.IDataProtection.GenerateKey">
            <summary>
            生成并返回 base64 格式的密钥.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Security.IDataProtection.ImportKey(System.String)">
            <summary>
            从 base64 字符串中导入 key.
            </summary>
            <param name="base64">base64 密钥</param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Security.IDataProtection.Encrypt(System.String)">
            <summary>
            加密指定的文本并返回加密后的结果.
            </summary>
            <param name="text">要加密的文本.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Security.IDataProtection.Encrypt(System.Byte[])">
            <summary>
            加密指定的字节数组，并返回加密后的结果.
            </summary>
            <param name="buffer">要加密的字节数组.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Security.IDataProtection.Decrypt(System.String)">
            <summary>
            解密指定的文本并返回解密后的结果.
            </summary>
            <param name="text">待解密的文本.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Security.IDataProtection.Decrypt(System.Byte[])">
            <summary>
            解指定的字节数组，并返回加密后的结果.
            </summary>
            <param name="buffer">待解密的字节数组.</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Security.RsaDataProtection">
            <summary>
            表示采用 RSA 算法的数据保护.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Security.RsaDataProtection.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.CodeFirstDemo.Data.Security.RsaDataProtection"/> 的对象实例.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Security.RsaDataProtection.Decrypt(System.String)">
            <summary>
            解密指定的文本并返回解密后的结果.
            </summary>
            <param name="text">待解密的文本.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Security.RsaDataProtection.Decrypt(System.Byte[])">
            <summary>
            解指定的字节数组，并返回加密后的结果.
            </summary>
            <param name="buffer">待解密的字节数组.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Security.RsaDataProtection.Encrypt(System.String)">
            <summary>
            加密指定的文本并返回加密后的结果.
            </summary>
            <param name="text">要加密的文本.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Security.RsaDataProtection.Encrypt(System.Byte[])">
            <summary>
            加密指定的字节数组，并返回加密后的结果.
            </summary>
            <param name="buffer">要加密的字节数组.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Security.RsaDataProtection.GenerateKey">
            <summary>
            生成并返回 base64 格式的密钥.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Security.RsaDataProtection.ImportKey(System.String)">
            <summary>
            从 base64 字符串中导入 key.
            </summary>
            <param name="base64">base64 密钥</param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Security.RsaDataProtection.Dispose(System.Boolean)">
            <summary>
            资源对象占用的资源.
            </summary>
            <param name="disposing">手动则用时为 true，对象终结器调用时则为 false .</param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Security.RsaDataProtection.Dispose">
            <summary>
            释放对象占用的资源.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Security.RsaDataProtection.Finalize">
            <summary>
            结象终结器（析构函数）.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Services.ApplicationService`1">
            <summary>
            应用程序服务的基础实现类型.
            </summary>
            <typeparam name="TData">数据实体或模型的类型名称.</typeparam>
            <typeparam name="TDao">实体的数据查询访问类型名称.</typeparam>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Services.ApplicationService`1.#ctor(Wunion.DataAdapter.CodeFirstDemo.Data.Domain.MyDbContext)">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.CodeFirstDemo.Services.ApplicationService`1"/> 的对象实例.
            </summary>
            <param name="context">数据库上下文对象.</param>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Services.ApplicationService`1.db">
            <summary>
            数据库上下文对象.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Services.ApplicationService`1.Add(`0)">
            <summary>
            添加数据.
            </summary>
            <param name="data">要添加的数据.</param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Services.ApplicationService`1.Update(`0)">
            <summary>
            更新数据.
            </summary>
            <param name="data">要更新的数据.</param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Services.ApplicationService`1.Delete(System.Object)">
            <summary>
            删除数据.
            </summary>
            <param name="condition">删除条件.</param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Services.ApplicationService`1.Delete``2(Wunion.DataAdapter.Kernel.CodeFirst.DbTableContext{``0},System.Func{``1,System.Object[]},System.Object)">
            <summary>
            支持软删除的实现.
            </summary>
            <typeparam name="TEntity">实体类型名称.</typeparam>
            <typeparam name="TDao">查询访问器类型名称.</typeparam>
            <param name="tableContext">表上下文对象.</param>
            <param name="condition">删除条件</param>
            <param name="controller">执行删除的的事务控制器(<see cref="T:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController"/>)或批处理(<see cref="T:Wunion.DataAdapter.Kernel.BatchCommander"/>)对象.</param>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Services.UserAccountService">
            <summary>
            应用程序的用户账户服务.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Services.UserAccountService.#ctor(Wunion.DataAdapter.CodeFirstDemo.Data.Domain.MyDbContext)">
            <summary>
            创建一个应用程序的用户账户服务.
            </summary>
            <param name="context">数据库上下文对象.</param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Services.UserAccountService.ProtectPassword(System.String,System.DateTime)">
            <summary>
            保护输入的密码，并返回受保护后的密码.
            </summary>
            <param name="input">输入的密码.</param>
            <param name="creation">用户账户的创建日期.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Services.UserAccountService.ThrowIfFieldOccupied(System.String,Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccount,Wunion.DataAdapter.Kernel.BatchCommander)">
            <summary>
            若指定的字段值已被占用时触发异常.
            </summary>
            <param name="field">要检测的字段名称.</param>
            <param name="data">实体对象.</param>
            <param name="batch"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Services.UserAccountService.Add(Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccount)">
            <summary>
            添加用户账户.
            </summary>
            <param name="data">用户账户数据.</param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Services.UserAccountService.Delete(System.Object)">
            <summary>
            删除用户账户.
            </summary>
            <param name="condition">删除条件.</param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Services.UserAccountService.Update(Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccount)">
            <summary>
            修改用户账户.
            </summary>
            <param name="data">更新的用户数据.</param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Services.UserAccountService.List">
            <summary>
            获取所有用户账户列表.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Services.UserAccountService.LogIn(System.String,System.String)">
            <summary>
            用户账户登录.
            </summary>
            <param name="name">用户名或邮箱号.</param>
            <param name="password">登录密码.</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.SystemPermissions">
            <summary>
            应用程序的所有权限定义.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.CodeFirstDemo.SystemPermissions.DATA_PROTECTION_USE">
            <summary>
            调用数据保护 api 的权限.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.CodeFirstDemo.SystemPermissions.DATA_PROTECTION_CK">
            <summary>
            创建数据保护服务密钥的权限.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.CodeFirstDemo.SystemPermissions.USER_ACCOUNT_RD">
            <summary>
            读取用户账户的权限.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.CodeFirstDemo.SystemPermissions.USER_ACCOUNT_CT">
            <summary>
            创建用户账户的权限.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.CodeFirstDemo.SystemPermissions.USER_ACCOUNT_CH">
            <summary>
            修改用户账户的权限.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.CodeFirstDemo.SystemPermissions.USER_ACCOUNT_RM">
            <summary>
            删除用户账户的权限.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Startup.GetDbSettings(System.String)">
            <summary>
            获取指定类型数据库的设置段.
            </summary>
            <param name="kind">数据库类型.</param>
            <returns></returns>
        </member>
    </members>
</doc>
