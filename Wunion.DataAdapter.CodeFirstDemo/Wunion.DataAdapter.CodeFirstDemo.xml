<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Wunion.DataAdapter.CodeFirstDemo</name>
    </assembly>
    <members>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.ServiceCollectionExtensions">
            <summary>
            用于扩展 <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> 对象的方法.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.ServiceCollectionExtensions.AddDbContainer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Wunion.DataAdapter.CodeFirstDemo.Data.IDatabaseContainer})">
            <summary>
            添加数据库容器的依赖注入支持.
            </summary>
            <param name="services"></param>
            <param name="configure">用于设置数据库容器</param>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.ApplicationBuilderExtensions">
            <summary>
            用于扩展 <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/>
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.ApplicationBuilderExtensions.UseSqlServer(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Wunion.DataAdapter.CodeFirstDemo.Data.DbEngineConfiguration})">
            <summary>
            使用 Microsoft SQL Server 数据库.
            </summary>
            <param name="app"></param>
            <param name="configure">用于配置数据库.</param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.ApplicationBuilderExtensions.UseMySql(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Wunion.DataAdapter.CodeFirstDemo.Data.DbEngineConfiguration})">
            <summary>
            使用 MySQL 数据库.
            </summary>
            <param name="app"></param>
            <param name="configure">用于配置数据库.</param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.ApplicationBuilderExtensions.UseNpgsql(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Wunion.DataAdapter.CodeFirstDemo.Data.DbEngineConfiguration})">
            <summary>
            使用 PostgreSQL 数据库.
            </summary>
            <param name="app"></param>
            <param name="configure">用于配置数据库.</param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.ApplicationBuilderExtensions.UseSqlite3(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Wunion.DataAdapter.CodeFirstDemo.Data.DbEngineConfiguration})">
            <summary>
            使用 Sqlite3 数据库.
            </summary>
            <param name="app"></param>
            <param name="configure">用于配置数据库.</param>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Controllers.UserAccountController">
            <summary>
            提供用户账户管理功能的控制器.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Controllers.UserAccountController.Create(Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccount)">
            <summary>
            用于创建用户账户.
            </summary>
            <param name="account">用户账户信息.</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Controllers.WeatherForecastController">
            <summary>
            自动创建的 webapi 控制器.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Controllers.WeatherForecastController.Get">
            <summary>
            我肏，用于测试的 Get 请求 api.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Controllers.WeatherForecastController.CustomMethod(System.Int32,System.String)">
            <summary>
            这是一个在控制器中自定义的方法，传入什么就返回什么.
            </summary>
            <param name="code">传入代码.</param>
            <param name="message">代码所对应的消息.</param>
            <returns>返回什么值?</returns>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Controllers.WeatherForecastController.IsModTwo(System.Int32)">
            <summary>
            用于将指定的整数与 2 求模测试.
            </summary>
            <param name="value">测试值.</param>
            <returns></returns>
            <response code="200">value 为 2 的倍数.</response>
            <response code="510">value 不是 2 的倍数.</response>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.IDatabaseContainer">
            <summary>
            表示应用程序的数据库容器.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.IDatabaseContainer.DbKind">
            <summary>
            获取或设置当前活动的数据库种类.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.IDatabaseContainer.AddDbEngine(System.String,Wunion.DataAdapter.CodeFirstDemo.Data.DbEngineConfiguration)">
            <summary>
            添加一个数据库引擎的配置信息.
            </summary>
            <param name="key">键名称.</param>
            <param name="configuration">配置信息.</param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.IDatabaseContainer.GetDbContext``1">
            <summary>
            获取数据库上下文对象.
            </summary>
            <typeparam name="TDbContext"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.DbEngineConfiguration">
            <summary>
            表示数据引擎的配置信息.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.DbEngineConfiguration.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.CodeFirstDemo.Data.DbEngineConfiguration"/> 的对象实例.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.DbEngineConfiguration.Kind">
            <summary>
            表示数据库种类.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.DbEngineConfiguration.DbEngine">
            <summary>
            数据库引擎.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.DbEngineConfiguration.DbContextFactory">
            <summary>
            设置用于创建数据库上下文对象实例的方法.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.DbEngineConfiguration.CreateDbContext``1(Wunion.DataAdapter.Kernel.DataEngine)">
            <summary>
            创建数据库上下文对象.
            </summary>
            <typeparam name="TDbContext"></typeparam>
            <param name="engine">数据库引擎.</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.DatabaseContainer">
            <summary>
            数据库容器.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.DatabaseContainer.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.CodeFirstDemo.Data.DatabaseContainer"/> 对象实例.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.DatabaseContainer.DbKind">
            <summary>
            获取或设置当前活动的数据库种类.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountDao">
            <summary>
            表示用户账户实体. DAO .
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountDao.UID">
            <summary>
            表示用户账户ID.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountDao.Name">
            <summary>
            用户账户名称.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountDao.Password">
            <summary>
            用户密码.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountDao.Status">
            <summary>
            用户账户的状态.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountDao.User">
            <summary>
            该用户账户的使用人.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountDao.PhoneNumber">
            <summary>
            手机号.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountDao.Email">
            <summary>
            电子邮件.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountDao.Creation">
            <summary>
            该用户账户的创建日期.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountPermissionDao">
            <summary>
            用户账户的权限. DAO .
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountPermissionDao.UID">
            <summary>
            表示用户账户ID.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountPermissionDao.Permissions">
            <summary>
            表示用户账户的权限.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountStatus">
            <summary>
            表示用户账户的状态.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountStatus.Enabled">
            <summary>
            正常启用状态.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountStatus.Disabled">
            <summary>
            用户账户已被禁用.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountStatus.Locked">
            <summary>
            用户账户已被锁定.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccount">
            <summary>
            表示用户账户实体.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccount.UID">
            <summary>
            表示用户账户ID.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccount.Name">
            <summary>
            用户账户名称.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccount.Password">
            <summary>
            用户密码.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccount.Status">
            <summary>
            用户账户的状态.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccount.User">
            <summary>
            该用户账户的使用人.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccount.PhoneNumber">
            <summary>
            手机号.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccount.Email">
            <summary>
            电子邮件.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccount.Creation">
            <summary>
            该用户账户的创建日期.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountStatusConverter">
            <summary>
            用户账户状态枚举的数据库类型转换器.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountStatusConverter.ConvertTo(Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountStatus,System.Type,System.Object@)">
            <summary>
            转换到数据库支持的类型.
            </summary>
            <param name="value"></param>
            <param name="dest"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountStatusConverter.Parse(System.Object,Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountStatus@)">
            <summary>
            从数据库支持的类型转换为枚举.
            </summary>
            <param name="value"></param>
            <param name="buffer"></param>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountPermission">
            <summary>
            用户账户的权限.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountPermission.UID">
            <summary>
            表示用户账户ID.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserAccountPermission.Permissions">
            <summary>
            表示用户账户的权限.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserPermissionsConverter">
            <summary>
            表示用户账户权限集合转换器.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserPermissionsConverter.ConvertTo(System.Collections.Generic.List{System.String},System.Type,System.Object@)">
            <summary>
            转换到数据库支持的值类型.
            </summary>
            <param name="value"></param>
            <param name="dest"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.UserPermissionsConverter.Parse(System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            从数据库中的值转换为集合.
            </summary>
            <param name="value"></param>
            <param name="buffer"></param>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.MyDbContext">
            <summary>
            测试的数据库.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.MyDbContext.#ctor(Wunion.DataAdapter.Kernel.DataEngine)">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.MyDbContext"/> 数据库上下文对象实例.
            </summary>
            <param name="engine"></param>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.MyDbContext.UserAccounts">
            <summary>
            用户账户表.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.MyDbContext.UserPermissions">
            <summary>
            用户账户权限表.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.MyDbContext.OnBeforeGenerating(Wunion.DataAdapter.Kernel.CodeFirst.IGeneratingOptions)" -->
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Domain.MyTableUpgradeMigrator">
            <summary>
            用于在表升级重建时迁移数据.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.CodeFirstDemo.Data.Models.ErrorMessage">
            <summary>
            表示错误信息.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Models.ErrorMessage.Code">
            <summary>
            错误代码.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.CodeFirstDemo.Data.Models.ErrorMessage.Message">
            <summary>
            错误消息.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.CodeFirstDemo.Startup.GetDbSettings(System.String)">
            <summary>
            获取指定类型数据库的设置段.
            </summary>
            <param name="kind">数据库类型.</param>
            <returns></returns>
        </member>
    </members>
</doc>
